{
	"info": {
		"_postman_id": "3926af07-f8f9-45af-ae9f-9c667e8d0f19",
		"name": "Notes API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39147891"
	},
	"item": [
		{
			"name": "Obtener todas las notas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código de estado es 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"La respuesta tiene 'total' y 'results'\", () => {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json).to.have.property('total');\r",
							"    pm.expect(json).to.have.property('results');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/notes/all",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"notes",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener el contenido de una nota",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código de estado es 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"La respuesta tiene 'content' con el contenido correcto\", () => {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json).to.have.property('content', 'Contenido de note1');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/notes/note1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"notes",
						"note1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Paginado - De la 0 a la 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código de estado es 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"La respuesta tiene hasta 5 resultados\", () => {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json).to.have.property('results');\r",
							"    pm.expect(json.results.length).to.be.at.most(5);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/notes/all?offset=0&limit=5",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"notes",
						"all"
					],
					"query": [
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Filtro - Obtener \"note1\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código de estado es 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"La respuesta contiene la nota 'note1'\", () => {\r",
							"    const json = pm.response.json();\r",
							"    const containsNote1 = json.results.some(note => note.name === \"note1\");\r",
							"    pm.expect(containsNote1).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/notes/all?filter=note1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"notes",
						"all"
					],
					"query": [
						{
							"key": "filter",
							"value": "note1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Orden - Descendente por creación",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código de estado es 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Las notas están ordenadas descendentemente por 'createdAt'\", () => {\r",
							"    const json = pm.response.json();\r",
							"    const dates = json.results.map(note => new Date(note.createdAt));\r",
							"    const sorted = [...dates].sort((a, b) => b - a);\r",
							"    pm.expect(dates).to.eql(sorted);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/notes/all?sort=-createdAt",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"notes",
						"all"
					],
					"query": [
						{
							"key": "sort",
							"value": "-createdAt"
						}
					]
				}
			},
			"response": []
		}
	]
}